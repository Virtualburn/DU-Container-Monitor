{"slots":{"0":{"name":"CORE","type":{"events":[],"methods":[]}},"1":{"name":"SCREEN_A","type":{"events":[],"methods":[]}},"2":{"name":"DB","type":{"events":[],"methods":[]}},"3":{"name":"Slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"system.print(\"KICKSTART\")\nrefresh_in_sec = 8 --export\nunit.setTimer(\"refresh\", refresh_in_sec)\nunit.stopTimer(\"kickstart\")\nreload()","filter":{"args":[{"value":"kickstart"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"0"},{"code":"--system.print(\"RELOAD\")\nreload()","filter":{"args":[{"value":"refresh"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"1"},{"code":"-- DU-CONTAINER_MONITOR v2.1 by Virtuaburn [ODY]/[M3NTiS]\n-- Original script by carnopereira v1.9 - last commit\n-- NOTE this script will monitor Basic and Advanced Optomized containers with full talents applied (future update will incorporate all containers and optional talent setting)\n-- Any questions please contact Virtualburn on discord : https://discord.gg/d5M7GeMuSJ\n-----------------\n-- USE : Code needs to be placed on a Programming board : Connect CORE > SCREEN (SCREEN_A & SCREEN_B) > DATABANK\n-- USE : Add a relay and connect to the PB and Screens > connect detector to relay and this will turn on screens only when required\n-----------------\n-- Container/Hub naming examples\n-- CH_10XL_BAUXITE → count 10, size XL → uses ContainerXLCapacity (Named container hub connected to 10 Basic XL containers holding Bauxite)\n-- C_1XXLa_IRON → count 1, size XXLa → uses ContainerXXLaCapacity (Named container XXL Advanced Optimized holding Iron)\n-- C_XLu_COAL → count 1 (default), size XLu → uses ContainerXLuCapacity (Named container XL Uncommon holding Coal)\n-----------------\n\n-----------------\n-- SYSTEM VARS --\n-----------------\nlocal version = 2.2\n---------------\n-- USER VARS --\n---------------\n\n-- How many 5% mass-reduction talents do you have? 0..5\n-- e.g. 5 = 25% reduction (factor 0.75)\nlocal ItemMassReductionTalents = 5 --export\n-- Returns the in-game mass multiplier after talents (1.00 .. 0.75)\nlocal function getItemMassReductionFactor()\n    local t = math.floor(tonumber(ItemMassReductionTalents) or 0)\n    if t < 0 then t = 0 elseif t > 5 then t = 5 end\n    return 1.0 - (0.05 * t)\nend\n\n-------------------------------\n--  CAPACITY TALENTS & TIERS --\n-------------------------------\n\n-- How many 10% capacity talents? 0..5  (5 => +50%)\nlocal ContainerCapacityTalents = 5 --export\n\n-- Tier step increase in percent. In your setup, each step is +30%.\n-- 'c' (basic) = 0 steps, 'u' = 1 step, 'a' = 2 steps, 'r' = 3 steps.\nlocal TierStepPercent = 30 --export\n\n-- Base capacities in L (NO talents, BASIC tier).\n\nlocal BaseContainerCapacityL = {\n  XS  = 1000,     -- confirmed\n  S   = 8000,    -- confirmed\n  M   = 64000,    -- confirmed\n  L   = 128000,   -- confirmed\n  XL  = 256000,   -- confirmed\n  XXL = 512000,   -- confirmed\n}\n\n-- +10% per talent level (0..5) -> 1.00 .. 1.50\nlocal function getCapacityTalentMultiplier()\n  local t = math.floor(tonumber(ContainerCapacityTalents) or 0)\n  if t < 0 then t = 0 elseif t > 5 then t = 5 end\n  return 1.0 + (0.10 * t)\nend\n\n-- Tier step multiplier (e.g., 1.30 for +30% per step)\nlocal function getTierStepMultiplier()\n  local p = tonumber(TierStepPercent) or 0\n  return 1.0 + (p / 100.0)\nend\n\n-- Map tier char -> number of steps: c=0, u=1, a=2, r=3\nlocal function getTierSteps(tierChar)\n  local t = (tostring(tierChar or \"c\")):lower()\n  if t == \"u\" then return 1\n  elseif t == \"a\" then return 2\n  elseif t == \"r\" then return 3\n  else return 0 end\nend\n\n-- Split \"XXLa\" / \"XLu\" / \"L\" -> base=\"XXL\"/\"XL\"/\"L\", tier=\"a\"/\"u\"/\"c\"\nlocal function splitSizeTier(sizeKey)\n  local up = tostring(sizeKey or \"L\"):upper()\n  local base = up:match(\"XXL\") or up:match(\"XL\") or up:match(\"XS\")\n            or (up:match(\"^L$\") and \"L\")\n            or (up:match(\"^M$\") and \"M\")\n            or (up:match(\"^S$\") and \"S\")\n            or \"L\"\n  local tier = (up:match(\"[UAR]$\") or \"C\"):lower()\n  return base, tier\nend\n\nlocal Percentage_RED = 5 --export\nlocal Percentage_GREEN = 50 --export\nlocal UseContainerHubs = false --export\nlocal UseDoors = false --export\nlocal DoorUsers = {'user1', 'user2', 'user3'}\n-- username array like {'user1', 'user2', 'CaseSensitive'}\nlocal showHudWidget = false --export\n\n-----------------\n-- USER CONFIG --\n-----------------\n-- LIST OF ORE/PURES:\n-- \"HEMATITE\",\"IRON\",\"BAUXITE\",\"ALUMINIUM\",\"COAL\",\"CARBON\",\"QUARTZ\",\"SILICON\"\n-- \"LIMESTONE\",\"CALCIUM\",\"MALACHITE\",\"COPPER\",\"NATRON\",\"SODIUM\",\"CHROMITE\",\"CHROMIUM\",\"ACANTHITE\"\n-- \"SILVER\",\"PYRITE\",\"SULFUR\",\"PETALITE\",\"LITHIUM\",\"GARNIERITE\",\"NICKEL\",\"GOLDNUGGETS\",\"GOLD\"\n-- \"CRYOLITE\",\"FLUORINE\",\"COBALTITE\",\"COBALT\",\"KOLBECKITE\",\"SCANDIUM\",\"RHODONITE\",\"MANGANESE\"\n-- \"COLUMBITE\",\"NIOBIUM\",\"VANADINITE\",\"VANADIUM\",\"ILMENITE\",\"TITANIUM\"\n-- EXTRA MATERIALS TO USE: \"OXYGEN\", \"HYDROGEN\", \"WARPCELL\"\n-- On this next arrays you will place witch order you like\n-- Read always left to right, then next line.\n-- YOU CAN SET \"EMPTY\" if you need a blank space\n\nlocal SCREENA = {\"HEMATITE\", \"IRON\", \"BAUXITE\", \"ALUMINIUM\", \"COAL\", \"CARBON\", \"QUARTZ\", \"SILICON\", \"LIMESTONE\", \"CALCIUM\",\n    \"MALACHITE\", \"COPPER\", \"NATRON\", \"SODIUM\", \"CHROMITE\", \"CHROMIUM\", \"ACANTHITE\", \"SILVER\", \"PYRITE\", \"SULFUR\"}\n\nlocal SCREENB = {\"PETALITE\", \"LITHIUM\", \"GARNIERITE\", \"NICKEL\", \"GOLDNUGGETS\", \"GOLD\", \"CRYOLITE\", \"FLUORINE\",\n    \"COBALTITE\", \"COBALT\", \"KOLBECKITE\", \"SCANDIUM\", \"RHODONITE\", \"MANGANESE\", \"COLUMBITE\", \"NIOBIUM\", \"VANADINITE\",\n    \"VANADIUM\", \"ILMENITE\", \"TITANIUM\"}\n\n-------------------------\n-- AUXILIARY FUNCTIONS --\n-------------------------\nfunction roundint(x)\n    return x >= 0 and math.floor(x + 0.5) or math.ceil(x - 0.5)\nend\n\nfunction round(value)\n    local x = math.abs(value)\n    if math.type(x) == \"float\" then\n        return utils.round(x, 0.1)\n    else\n        return x\n    end\nend\n\nfunction split(s, sep)\n    local fields = {}\n    local sep = sep or \" \"\n    local pattern = string.format(\"([^%s]+)\", sep)\n    string.gsub(s, pattern, function(c)fields[#fields + 1] = c end)\n    return fields\nend\n\nlocal function hasValue(s)\n    if s == nil or s == '' then return \"empty\"\n    else return s end\nend\n\nfunction print_r(arr, indentLevel)\n    local str = \"\"\n    local indentStr = \"#\"\n    \n    if (indentLevel == nil) then\n        system.print(print_r(arr, 0))\n        return\n    end\n    \n    for i = 0, indentLevel do\n        indentStr = indentStr .. \"\\t\"\n    end\n    \n    for index, value in pairs(arr) do\n        if type(value) == \"table\" then\n            str = str .. indentStr .. index .. \": \\n\" .. print_r(value, (indentLevel + 1))\n        else\n            str = str .. indentStr .. index .. \": \" .. value .. \"\\n\"\n        end\n    end\n    return str\nend\n\nfunction arraylength(T)\n    local count = 0\n    if T == nil then return 0\n    else\n        for _ in pairs(T) do count = count + 1 end\n        return count\n    end\nend\n\nfunction getFromArray(array, position)\n    u = \"\"\n    for i, j in pairs(array) do u = j[position] end\n    --print_r(array)\n    return u\nend\n\n----------------\n-- CORE STUFF --\n----------------\ncore = nil\ndbank = nil\nfor slot_name, slot in pairs(unit) do\n    if\n        type(slot) == \"table\"\n        and type(slot.export) == \"table\"\n        and slot.getElementClass\n    then\n        if slot.getClass():lower():find(\"coreunit\") then\n            core = slot\n        elseif\n            slot.getClass():lower():find(\"databank\") then\n            dbank = slot\n        end\n    end\nend\n\n-- Parse tokens like \"10XLu\", \"2XXLa\", \"5L\", \"xxl\", \"XL-\", \"XXL \" etc.\n-- Returns: count (number), sizeKey (\"XS\",\"S\",\"M\",\"L\",\"XL\",\"XXL\" + optional \"u\"/\"a\"/\"r\")\nlocal function parseCountAndSize(token)\n    token = tostring(token or \"\"):gsub(\"%s+\", \"\")         -- strip spaces\n    local d = token:match(\"^(%d+)\")                       -- leading digits\n    local count = tonumber(d) or 1\n    local rest = d and token:sub(#d + 1) or token\n    if rest == \"\" then rest = \"L\" end\n\n    -- normalize\n    local up = rest:upper()\n\n    -- find base by priority (avoid matching 'L' inside 'XL'/'XXL')\n    local base =\n        up:match(\"XXL\") or\n        up:match(\"XL\")  or\n        up:match(\"XS\")  or\n        up:match(\"^L$\") or\n        up:match(\"^M$\") or\n        up:match(\"^S$\")\n\n    if not base then\n        -- last-ditch: if someone typed something odd like \"XL-adv\"\n        base = (up:find(\"XXL\") and \"XXL\")\n            or (up:find(\"XL\") and \"XL\")\n            or (up:find(\"XS\") and \"XS\")\n            or (up:find(\"L\") and \"L\")\n            or (up:find(\"M\") and \"M\")\n            or (up:find(\"S\") and \"S\")\n            or \"L\"\n    end\n\n    -- optional tier: only take it if it's the final char\n    local tier = up:match(\"[UAR]$\") or \"\"\n    return count, (base .. tier:lower())\nend\n\n\ncontainersIdList = {}\nif core ~= nil then\n    local elementsIdList = core.getElementIdList()\n    for _, id in pairs(elementsIdList) do\n        local elementType = core.getElementDisplayNameById(id):lower()\n        if elementType:find(\"container\") then\n            local name = core.getElementNameById(id)\n            if name:match(\"^CH_\") or name:match(\"^C_\") then\n                local temp = split(name, \"_\")\n\t\t\t\t-- Extract \"<count><size><tier>\" from the second token, e.g. \"10XLu\" -> 10, \"XLu\"\n\t\t\t\tlocal count, sizeKey = parseCountAndSize(temp[2])\n\t\t\t\ttable.insert(\n\t\t\t\t\tcontainersIdList,\n\t\t\t\t\t\t{ id, temp[1], count, sizeKey, temp[3], hasValue(temp[4]) }\n\t\t\t\t) -- 1:id, 2:type, 3:containercount, 4:containersize, 5:material, 6:description\n            end\n        end\n    end\nend\n\nfunction checkDB()\n    dbVersion = dbank.getFloatValue(\"version\")\n    if dbVersion == nil then return nil\n    elseif dbVersion < version then return \"upgrade\"\n    else return \"noupgrade\" end\nend\n\nfunction saveDB()\n    dbank.setIntValue(\"dummy\", 1)\n    dbank.setFloatValue(\"version\", version)\n-- DB XS CAP --    \n        dbank.setIntValue(\"ContainerXSCapacity\", ContainerXSCapacity)\n            dbank.setIntValue(\"ContainerXSuCapacity\", ContainerXSuCapacity)\n            dbank.setIntValue(\"ContainerXSaCapacity\", ContainerXSaCapacity)\n            dbank.setIntValue(\"ContainerXSrCapacity\", ContainerXSrCapacity)\n-- DB S CAP  --     \n        dbank.setIntValue(\"ContainerSCapacity\", ContainerSCapacity)\n            dbank.setIntValue(\"ContainerSuCapacity\", ContainerSuCapacity)\n            dbank.setIntValue(\"ContainerSaCapacity\", ContainerSaCapacity)\n            dbank.setIntValue(\"ContainerSrCapacity\", ContainerSrCapacity)\n-- DB M CAP  --     \n        dbank.setIntValue(\"ContainerMCapacity\", ContainerMCapacity)\n            dbank.setIntValue(\"ContainerMuCapacity\", ContainerMuCapacity)\n            dbank.setIntValue(\"ContainerMaCapacity\", ContainerMaCapacity)\n            dbank.setIntValue(\"ContainerMrCapacity\", ContainerMrCapacity)\n-- DB L CAP  -- \n        dbank.setIntValue(\"ContainerLCapacity\", ContainerLCapacity)\n            dbank.setIntValue(\"ContainerLuCapacity\", ContainerLuCapacity)\n            dbank.setIntValue(\"ContainerLaCapacity\", ContainerLaCapacity)\n            dbank.setIntValue(\"ContainerLrCapacity\", ContainerLrCapacity)\n-- DB XL CAP  --     \n        dbank.setIntValue(\"ContainerXLCapacity\", ContainerXLCapacity)\n            dbank.setIntValue(\"ContainerXLuCapacity\", ContainerXLuCapacity)\n            dbank.setIntValue(\"ContainerXLaCapacity\", ContainerXLaCapacity)\n            dbank.setIntValue(\"ContainerXLrCapacity\", ContainerXLrCapacity)\n-- DB XXL CAP  --     \n        dbank.setIntValue(\"ContainerXXLCapacity\", ContainerXXLCapacity)\n            dbank.setIntValue(\"ContainerXXLuCapacity\", ContainerXXLuCapacity)\n            dbank.setIntValue(\"ContainerXXLaCapacity\", ContainerXXLaCapacity)\n            dbank.setIntValue(\"ContainerXXLrCapacity\", ContainerXXLrCapacity)\n    \n    dbank.setIntValue(\"Percentage_RED\", Percentage_RED)\n    dbank.setIntValue(\"Percentage_GREEN\", Percentage_GREEN)\n    if UseContainerHubs then\n        dbank.setIntValue(\"UseContainerHubs\", 1)\n    else\n        dbank.setIntValue(\"UseContainerHubs\", 0)\n    end\n    if UseDoors then\n        dbank.setIntValue(\"UseDoors\", 1)\n    else\n        dbank.setIntValue(\"UseDoors\", 0)\n    end\n    if showHudWidget then\n        dbank.setIntValue(\"showHudWidget\", 1)\n    else\n        dbank.setIntValue(\"showHudWidget\", 0)\n    end\nend\n\nfunction readDB()\n    if dbank.getIntValue(\"dummy\") == 1 then\n        -- DB XS CAP\n        ContainerXSCapacity = dbank.getIntValue(\"ContainerXSCapacity\")\n        ContainerXSuCapacity = dbank.getIntValue(\"ContainerXSuCapacity\")\n        ContainerXSaCapacity = dbank.getIntValue(\"ContainerXSaCapacity\")\n        ContainerXSrCapacity = dbank.getIntValue(\"ContainerXSrCapacity\")\n        \n        -- DB S CAP\n        ContainerSCapacity = dbank.getIntValue(\"ContainerSCapacity\")\n        ContainerSuCapacity = dbank.getIntValue(\"ContainerSuCapacity\")\n        ContainerSaCapacity = dbank.getIntValue(\"ContainerSaCapacity\")\n        ContainerSrCapacity = dbank.getIntValue(\"ContainerSrCapacity\")\n        \n        -- DB M CAP\n        ContainerMCapacity = dbank.getIntValue(\"ContainerMCapacity\")\n        ContainerMuCapacity = dbank.getIntValue(\"ContainerMuCapacity\")\n        ContainerMaCapacity = dbank.getIntValue(\"ContainerMaCapacity\")\n        ContainerMrCapacity = dbank.getIntValue(\"ContainerMrCapacity\")\n        \n        -- DB L CAP\n        ContainerLCapacity = dbank.getIntValue(\"ContainerLCapacity\")\n        ContainerLuCapacity = dbank.getIntValue(\"ContainerLuCapacity\")\n        ContainerLaCapacity = dbank.getIntValue(\"ContainerLaCapacity\")\n        ContainerLrCapacity = dbank.getIntValue(\"ContainerLrCapacity\")\n        \n        -- DB XL CAP\n        ContainerXLCapacity = dbank.getIntValue(\"ContainerXLCapacity\")\n        ContainerXLuCapacity = dbank.getIntValue(\"ContainerXLuCapacity\")\n        ContainerXLaCapacity = dbank.getIntValue(\"ContainerXLaCapacity\")\n        ContainerXLrCapacity = dbank.getIntValue(\"ContainerXLrCapacity\")\n        \n        -- DB XXL CAP\n        ContainerXXLCapacity = dbank.getIntValue(\"ContainerXXLCapacity\")\n        ContainerXXLuCapacity = dbank.getIntValue(\"ContainerXXLuCapacity\")\n        ContainerXXLaCapacity = dbank.getIntValue(\"ContainerXXLaCapacity\")\n        ContainerXXLrCapacity = dbank.getIntValue(\"ContainerXXLrCapacity\")\n        \n        Percentage_RED = dbank.getIntValue(\"Percentage_RED\")\n        Percentage_GREEN = dbank.getIntValue(\"Percentage_GREEN\")\n        \n        if dbank.getIntValue(\"UseContainerHubs\") == 1 then\n            UseContainerHubs = false\n        else\n            UseContainerHubs = false\n        end\n        if dbank.getIntValue(\"UseDoors\") == 1 then\n            UseDoors = true\n        else\n            UseDoors = false\n        end\n        if dbank.getIntValue(\"showHudWidget\") == 1 then\n            showHudWidget = true\n        else\n            showHudWidget = false\n        end\n    end\nend\n\nfunction goDB()\n    if dbank ~= nil then\n        system.print(\"DATABANK FOUND\")\n        system.print(\"SCRIPT LOAD OK. CHECKING DB VERSION\")\n        \n        if checkDB() == nil then\n            system.print(\"UPGRADE DETECTED. FIRST RUN? LOADING KICKSTART\")\n            unit.setTimer(\"kickstart\", 1)\n        elseif checkDB() == \"upgrade\" then\n            readDB()\n            system.print(\"UPGRADE DETECTED. USER CONFIG LOADED. LOADING KICKSTART\")\n            unit.setTimer(\"kickstart\", 1)\n        else\n            readDB()\n            system.print(\"NO UPGRADE NEEDED. SAME VERSION. LOADING KICKSTART\")\n            unit.setTimer(\"kickstart\", 1)\n        end\n    else\n        system.print(\"NO DATABANK FOUND. LOADING KICKSTART\")\n        unit.setTimer(\"kickstart\", 1)\n    end\nend\n----------\n-- HTML --\n----------\nlocal html_css\nif UseContainerHubs then\n    html_css = [[\n    <style> \n    .table {background-color:none; height:99vh; margin:auto; padding:0; position:relative; width:98vw} \n    .column_1_2 {background-color:none; position:absolute; left:20px; height:100%; width:45vw} \n    .column_2_2 {background-color:none; position:absolute; right:0; height:100%; width:45vw} \n    .row {background-color:none; height:9.8vh; border:0px grey solid; padding-left:35%; width:99%} \n    .rowinfo {background-color:none; height:9.8vh; width:99%; text-align: center; font-size: 1.4vw;font-weigh:300; padding-top:6px}\n    .name {background-color:none; padding-left:0px; line-height:5vh; font-size: 4vh; display:inline-block; width:70%}\n    .progressbar {background-color:green; position:relative; float:right; bottom:2px; min-height:1vh; height:1vh; right:0; min-width:1vw}\n    .daysavailable {width:100%; background-color:none; position:relative; float:left; text-align:right; bottom:2px; height:2vh;font-size:12px}\n    .percentage {background-color:none; font-size: 5vh; line-height: 5vh; width:8.5vw; top: 0; right: 0; text-align:right; display:inline-block} \n    .desc {font-size:1.5vw; background-color: none; width: 98%; display: inline-block;}\n    .info {font-size:1.5vw; background-color: none; width: 30%; display: inline-block; right: 5px; position: absolute; text-align: right;}\n    </style>\n    ]]\n\nelse html_css = [[ \n    <style> \n    .table {background-color:none; height:99vh; margin:auto; padding:0; position:relative; width:50vw; display:inline-block} \n    .column_1_2 {background-color:none; position:absolute; height:100%; width:25vw} \n    .column_2_2 {background-color:none; position:absolute; right:0; height:100%; width:25vw}\n    .row {background-color:none; height:9.8vh; width:99%; padding: 0 8px} \n    .rowinfo {background-color:none; height:9.8vh; width:99%; text-align: center; font-size: 1.4vw;font-weigh:300; padding-top:6px}\n    .name {background-color:none; padding-left:0px; line-height:5vh; font-size: 3vh; display:inline-block; width:64%} \n    .progressbar {background-color:green; position:relative; float:right; bottom:2px; min-height:1vh; height:1vh; right:0; min-width:1vw}\n    .daysavailable {width:100%; background-color:none; position:relative; float:left; text-align:right; bottom:2px; height:2vh;font-size:12px}\n    .percentage {background-color:none; font-size: 4vh; line-height: 5vh; width:36%; top: 0; right: 0px; text-align:right; display:inline-block; padding:0}\n    .desc {font-size:1.2vw; background-color: none; width: 98%; display: inline-block;}\n    .info {font-size:1.2vw; background-color: none; width: 50%; display: inline-block; right: 10px; position: absolute; text-align: right;}\n    </style>   \n    ]]\n\nend\n\ncss_loading = [[\n    <style> \n    .wrapper{background-color:none;color:white;font-size:2vw;}\n    .valign > div{border:dotted 1px white;padding:20px 20px;}\n    .wrapper {position: absolute;width: 100%;height: 100%;}\n    .valign {width: 100%;height: 100%;display: flex;justify-content: center;align-items: center;}\n    </style>\n]]\n\nlocal material_readout_top = [[<div class=\"table\"><div class=\"column_1_2\">]]\n\nfunction material_readout_cell(name)\n    x = {}\n    --system.print(\"NAME: \"..hasValue(name))\n    if name == nil then\n        html = [[<div class=\"row\"><div class=\"name\"></div><div class=\"percentage\"></div><div class=\"progressbar\" style=\"width:0%; background-color:pink\">&nbsp;</div></div>]]\n    else\n        --system.print(name)\n        x = getMaterial(name)\n        --system.print(\"ENTRA 1\")\n        if next(x) == nil then\n            --system.print(\"array vazio\")\n            html = [[<div class=\"rowinfo\">PLEASE CONNECT<br>]] .. name .. [[</div>]]\n        else\n            percentage = getFromArray(x, 9)\n            description = getFromArray(x, 6)\n            if description == \"empty\" then description = \"\" end\n            quantity = getFromArray(x, 8)\n            totalcontainerqtdinlitre = getFromArray(x, 10)\n            --print_r(x)\n            --system.print(\"MATERIAL: \"..name..\" | %: \"..percentage)\n            html = [[<div class=\"row\"><div class=\"name\">]] .. _G[name][1] .. [[</div><div class=\"percentage\">]] .. percentage .. [[%</div><div class=\"progressbar\" style=\"width:]] .. percentage .. [[%; background-color:]] .. progresscolor(percentage) .. [[\">&nbsp;</div>\n            <div class=\"desc\">]]\n                .. description .. [[</div><div class=\"info\">]] .. litreParse(quantity, totalcontainerqtdinlitre) .. [[</div></div>]]\n        --system.print(progresscolor(percentage))\n        end\n    end\n    return html\nend\n\nlocal material_readout_middle = [[</div><div class=\"column_2_2\">]]\nlocal material_readout_bottom = [[</div></div>]]\n\nfunction progresscolor(percentage)\n    if tonumber(percentage) then\n        color = \"\"\n        if (percentage <= Percentage_RED) then\n            color = \"red\"\n        elseif (percentage > Percentage_RED) and (percentage < Percentage_GREEN) then\n            color = \"yellow\"\n        else\n            color = \"green\"\n        end\n        return color\n    else\n        return \"pink\"\n    end\nend\n\nfunction litreParse(litre, total)\n    size = \"\"\n    if total < 1000 then\n        size = \"L\"\n    elseif total < 1000000 then\n        total = total / 1000\n        size = \"kL\"\n    else\n        total = total / 1000000\n        size = \"kt\"\n    end\n    \n    if litre < 1000 then return string.format(\"%.1f\", litre) .. \"/\" .. string.format(\"%.1f\", total) .. size\n    elseif litre < 1000000 then\n        litre = litre / 1000\n        return string.format(\"%.1f\", litre) .. \"/\" .. string.format(\"%.1f\", total) .. size\n    else\n        litre = litre / 10000\n        total = total / 1000\n        return string.format(\"%.1f\", litre) .. \"/\" .. string.format(\"%.1f\", total) .. size\n    end\nend\n\n--------------------\n-- MATERIAL STUFF --\n--------------------\n-- VARIABLE = {Name that will be displayed on screen, unit mass, unit volume if exists}\nfunction createMaterials()\n    -- T1\n    HEMATITE = {\"Hematite\", 5.04}\n    IRON = {\"Iron\", 7.85}\n    BAUXITE = {\"Bauxite\", 1.28}\n    ALUMINIUM = {\"Aluminium\", 2.7}\n    QUARTZ = {\"Quartz\", 2.65}\n    SILICON = {\"Silicon\", 2.33}\n    COAL = {\"Coal\", 1.35}\n    CARBON = {\"Carbon\", 2.27}\n    -- T2\n    LIMESTONE = {\"Limestone\", 2.7}\n    CALCIUM = {\"Calcium\", 1.55}\n    MALACHITE = {\"Malachite\", 4}\n    COPPER = {\"Copper\", 8.96}\n    NATRON = {\"Natron\", 1.55}\n    SODIUM = {\"Sodium\", 0.97}\n    CHROMITE = {\"Chromite\", 4.54}\n    CHROMIUM = {\"Chromium\", 7.19}\n    -- T3\n    PYRITE = {\"Pyrite\", 5.01}\n    SULFUR = {\"Sulfur\", 1.82}\n    PETALITE = {\"Petalite\", 2.41}\n    LITHIUM = {\"Lithium\", 0.53}\n    ACANTHITE = {\"Acanthite\", 7.2}\n    SILVER = {\"Silver\", 10.49}\n    GARNIERITE = {\"Garnierite\", 2.6}\n    NICKEL = {\"Nickel\", 8.91}\n    -- T4\n    GOLDNUGGETS = {\"Gold Nuggets\", 19.3}\n    GOLD = {\"Gold\", 19.3}\n    CRYOLITE = {\"Cryolite\", 2.95}\n    FLUORINE = {\"Fluorine\", 1.7}\n    COBALTITE = {\"Cobaltite\", 6.33}\n    COBALT = {\"Cobalt\", 8.9}\n    KOLBECKITE = {\"Kolbeckite\", 2.37}\n    SCANDIUM = {\"Scandium\", 2.98}\n    -- T5\n    RHODONITE = {\"Rhodonite\", 3.76}\n    MANGANESE = {\"Manganese\", 7.21}\n    COLUMBITE = {\"Columbite\", 5.38}\n    NIOBIUM = {\"Niobium\", 8.57}\n    VANADINITE = {\"Vanadinite\", 6.95}\n    VANADIUM = {\"Vanadium\", 6}\n    ILMENITE = {\"Ilmenite\", 4.55}\n    TITANIUM = {\"Titanium\", 4.51}\n    -- OTHER\n    OXYGEN = {\"Oxygen\", 1}\n    HYDROGEN = {\"Hydrogen\", 0.07}\n    WARPCELL = {\"Warpcell\", 100}\n    -- STUFF\n    AILERONM = {\"Aileron M\", 3410, 1238.4}\nend\n\nfunction getQuantity(material, materialmass)\n    quantity = nil\n    quantity = roundint(materialmass / (_G[material][2]))\n    return quantity\nend\n\nfunction createMaterialArray(material)\n    arrayX = {}\n    for i, j in pairs(containersIdList) do\n        if j[5] == material then\n\t\t\tif (j[2] == \"CH\") or (j[2] == \"C\" and j[6] == \"empty\") then\n                --system.print(\"id: \"..j[1]..\", type: \"..j[2]..\", quantity: \"..j[3]..\", size: \"..j[4]..\", material: \"..j[5]..\", description: \"..j[6])\n                table.insert(arrayX, {j[1], j[2], j[3], j[4], j[5], j[6]})\n            end\n        end\n    end\n    return arrayX\nend\n\n-- Capacity (in L) for ONE container with sizeKey like \"XXL\", \"XLu\", \"XXLa\", etc.\nfunction getContainerCapacity(sizeKey)\n  local base, tier = splitSizeTier(sizeKey)\n  local baseL = BaseContainerCapacityL[base] or 0\n  if baseL == 0 then\n    system.print(\"WARN: unknown base capacity for size '\"..tostring(base)..\"'\")\n  end\n\n  local tierSteps = getTierSteps(tier)\n  local tierMult  = getTierStepMultiplier() ^ tierSteps\n  local talentMult = getCapacityTalentMultiplier()\n\n  return baseL * tierMult * talentMult\nend\n\n\nfunction getContainerMass(size)\n    mass = 0\n-- XS MASS --\t\n    if size == \"XS\" then mass = 229\n\t    elseif size == \"XSu\" then mass = 183\n\t\t    elseif size == \"XSa\" then mass = 147\n\t\t\t    elseif size == \"XSr\" then mass = 117\n-- S MASS --\t\t\t\t\t\n\telseif size == \"S\" then mass = 1281\n\t\telseif size == \"Su\" then mass = 1020\n\t\t\telseif size == \"Sa\" then mass = 820\n\t\t\t\telseif size == \"Sr\" then mass = 0\n-- M MASS --\t\t\t\t\t\n\telseif size == \"M\" then mass = 7420\n\t\telseif size == \"Mu\" then mass = 5940\n\t\t\telseif size == \"Ma\" then mass = 4750\n\t\t\t\telseif size == \"Mr\" then mass = 0\n-- L MASS --\t\t\t\t\t\n\telseif size == \"L\" then mass = 14840\n\t\telseif size == \"Lu\" then mass = 11870\n\t\t\telseif size == \"La\" then mass = 9500\n\t\t\t\telseif size == \"Lr\" then mass = 0\n-- XL MASS --\t\t\t\t\t\n\telseif size == \"XL\" then mass = 44210\n\t\telseif size == \"XLu\" then mass = 0\n\t\t\telseif size == \"XLa\" then mass = 0\n\t\t\t\telseif size == \"XLr\" then mass = 0\n-- XXL MASS --\t\t\n\telseif size == \"XXL\" then mass = 88410\n\t\telseif size == \"XXLu\" then mass = 0\n\t\t\telseif size == \"XXLa\" then mass = 56580\n\t\t\t\telseif size == \"XXLr\" then mass = 0\n    else\n        mass = 0\n    end\n    return mass\nend\n\nfunction calculateMaterial(arrayx)\n    local containermass = 0\n    local percentage = 0\n    local arrayY = {}\n\n    for i, j in pairs(arrayx) do\n        local capacity = getContainerCapacity(j[4]) * tonumber(j[3])  -- FIX: container count\n\t\t\tif j[2] == \"CH\" then\n\t\t\t\tcontainermass = core.getElementMassById(j[1]) - 55.8 -- CH base mass\n\t\t\tif containermass > 0 then\n\t\t\t\tlocal factor = getItemMassReductionFactor() -- e.g. 0.75 when talents=5\n\t\t\tif factor <= 0 then factor = 1.0 end        -- guardrail\n\t\t\t\tlocal adjustedMass = containermass / factor  -- undo the in-game reduction\n\t\t\t\t\tquantity = getQuantity(j[5], adjustedMass)\n\t\t\t\t\t\n                -- ✅ DEBUG PRINT\nsystem.print(string.format(\n  \"[%s] %s size %s x%d | talents=%d (factor=%.2f) | mass raw=%.1f adj=%.1f | L=%.2f\",\n  j[2], j[5], tostring(j[4]), j[3],\n  math.floor(tonumber(ItemMassReductionTalents) or 0),\n  getItemMassReductionFactor(),\n  containermass, adjustedMass, quantity\n))\n\t\t\t\t\n                if _G[j[5]][3] ~= nil then\n                    percentage = containerPercentage(quantity * _G[j[5]][3], capacity)\n                    quantity = quantity * _G[j[5]][3]\n                else\n                    percentage = containerPercentage(quantity, capacity)\n                end\n\n                totalcontainerquantityinlitre = capacity\n                table.insert(arrayY, {j[1], j[2], j[3], j[4], j[5], j[6], containermass, quantity, percentage, totalcontainerquantityinlitre})\n            end\n\nelseif j[2] == \"C\" then\n    containermass = core.getElementMassById(j[1]) - getContainerMass(j[4])\n    if containermass > 0 then\n        local factor = getItemMassReductionFactor()\n        if factor <= 0 then factor = 1.0 end\n        local adjustedMass = containermass / factor\n        quantity = getQuantity(j[5], adjustedMass)\n                -- ✅ DEBUG PRINT\t\t\n\t\tsystem.print(string.format(\n  \"[%s] %s size %s x%d | talents=%d (factor=%.2f) | mass raw=%.1f adj=%.1f | L=%.2f\",\n  j[2], j[5], tostring(j[4]), j[3],\n  math.floor(tonumber(ItemMassReductionTalents) or 0),\n  getItemMassReductionFactor(),\n  containermass, adjustedMass, quantity\n))\n\n                if _G[j[5]][3] ~= nil then\n                    percentage = containerPercentage(quantity * _G[j[5]][3], capacity)\n                    quantity = quantity * _G[j[5]][3]\n                else\n                    percentage = containerPercentage(quantity, capacity)\n                end\n\n                totalcontainerquantityinlitre = capacity\n                table.insert(arrayY, {j[1], j[2], j[3], j[4], j[5], j[6], containermass, quantity, percentage, totalcontainerquantityinlitre})\n\n                -- ✅ DEBUG PRINT\n                system.print(\"C: \"..j[5]..\" | Size: \"..j[4]..\" | Count: \"..j[3]..\" | Mass: \"..string.format(\"%.2f\", containermass)..\" | Qty: \"..string.format(\"%.2f\", quantity)..\" | Cap: \"..capacity..\" | %: \"..percentage)\n            end\n        end\n    end\n\n    -- Consolidate if more than 1 container present\n    if arraylength(arrayY) > 1 then\n        local arrayZ = {}\n        local v1, v2, v3, v4, v5, v6 = 999999999, \"C\", 0, \"SUM\", \"\", \"\"\n        local v7, v8, v9, v10 = 0, 0, 0, 0\n\n        for _, j in pairs(arrayY) do\n            v5 = j[5]\n            v7 = v7 + getContainerCapacity(j[4]) * tonumber(j[3])\n            v8 = v8 + j[8]\n            v10 = v10 + j[10]\n        end\n\n        v9 = containerPercentage(v8, v7)\n        table.insert(arrayZ, {v1, v2, v3, v4, v5, v6, v7, v8, v9, v10})\n        return arrayZ\n    end\n\n    return arrayY\nend\n\n\nfunction containerPercentage(materialqtd, containercapacity)\n    if materialqtd ~= nil then\n        local x = materialqtd * 100 / containercapacity\n        local y = math.floor(x + .5)\n        if y - x < 0.05 then\n            return roundint(x)\n        else\n            return round(x)\n        end\n    else\n        return 666\n    end\nend\n\nfunction getMaterial(material)\n    step1 = {}\n    step2 = {}\n    arrayZ = nil\n    -- STEP 1\n    -- create array with list of CH or C that contain specific material\n    step1 = createMaterialArray(material)\n    \n    -- STEP 2\n    -- calculate mass, quantity, percentage\n    step2 = calculateMaterial(step1)\n    \n    -- RETURN FULL ARRAY\n    --print_r(step2)\n    return step2\nend\n\n----------------\n-- HTML STUFF --\n----------------\nfunction create_material_readout_screen_A()\n    html = html_css .. material_readout_top\n    for i = 1, 20 do if (i % 2 ~= 0) then html = html .. material_readout_cell(SCREENA[i]) end end\n    html = html .. material_readout_middle\n    for i = 1, 20 do if (i % 2 == 0) then html = html .. material_readout_cell(SCREENA[i]) end end\n    html = html .. material_readout_bottom\n    if not UseContainerHubs then\n        html = html .. material_readout_top\n        for i = 1, 20 do if (i % 2 ~= 0) then html = html .. material_readout_cell(SCREENB[i]) end end\n        html = html .. material_readout_middle\n        for i = 1, 20 do if (i % 2 == 0) then html = html .. material_readout_cell(SCREENB[i]) end end\n        html = html .. material_readout_bottom\n    end\n    return html\nend\n\nfunction create_material_readout_screen_B()\n    html = html_css .. material_readout_top\n    for i = 1, 20 do if (i % 2 ~= 0) then html = html .. material_readout_cell(SCREENB[i]) end end\n    html = html .. material_readout_middle\n    for i = 1, 20 do if (i % 2 == 0) then html = html .. material_readout_cell(SCREENB[i]) end end\n    html = html .. material_readout_bottom\n    return html\nend\n\nfunction clearSCREEN()\n    -- CLEAR SCREENS\n    SCREEN_A.clear()\n    if SCREEN_B ~= nil then SCREEN_B.clear() end\nend\n\nfunction reload()\n    clearSCREEN()\n    \n    -- SCREEN A\n    html = [[<div style=\"width:100vw\"><div style=\"margin-top: 10px;padding: 0px;width: 100vw;display: inline-block;\">]] .. create_material_readout_screen_A() .. [[</div></div>]]\n    SCREEN_A.setHTML(html)\n    \n    -- SCREEN B\n    if SCREEN_B ~= nil then\n        html = [[<div style=\"width:100vw\"><div style=\"margin-top:10px;padding:0px;width:100vw;display:inline-block;\">]] .. create_material_readout_screen_B() .. [[</div></div>]]\n        SCREEN_B.setHTML(html)\n    end\nend\n\nfunction warmup()\n    system.print(\"WARMUP\")\n    \n    -- SCREEN A\n    html = css_loading .. [[<div class=\"wrapper\"><div class=\"valign\"><div>LOADING</div></div></div>]]\n    SCREEN_A.setHTML(html)\n    \n    -- LOAD SCREEN B LOADING\n    if SCREEN_B ~= nil then SCREEN_B.setHTML(html) end\nend\n\nfunction door()\n    local playerId = unit.getMasterPlayerId()\n    local playerName = system.getPlayerName(playerId)\n    local t = doorUsers -- username array like {'user1', 'user2', 'CaseSensitive'}\n    local function has_value(tab, val)\n        for index, value in ipairs(tab) do\n            if value == val then\n                return true\n            end\n        end\n        return false\n    end\n    --system.print(\"Hello \" .. playerName .. \" : \" .. playerId .. \"!\")\n    if has_value(t, playerName) then\n        if DOOR1 ~= nil then DOOR1.activate() end\n        if DOOR2 ~= nil then DOOR2.activate() end\n    --someSCREEN.setCenteredText(\"WELCOME\" .. playerName)\n    else\n        system.print('PERMISSION DENIED')\n    end\nend\n\n-- STARTUP FACTORY\nwarmup()\ncreateMaterials()\ngoDB()\n\nif not showHudWidget then unit.hideWidget() end\nif UseDoors then door() end\n","filter":{"args":[],"signature":"onStart()","slotKey":"-4"},"key":"2"},{"code":"SCREEN_A.clear()\nif SCREEN_B ~= nil then SCREEN_B.clear() end\n\nif DOOR1 ~= nil then\nif DOOR1.getState() == 1 then  \n    if DOOR1 ~= nil then DOOR1.deactivate() end\n    if DOOR2 ~= nil then DOOR2.deactivate() end\n    SCREEN_A.clear() \n    if SCREEN_B ~= nil then SCREEN_B_clear() end\nend\nend\n\nif dbank ~= nil then \n    system.print(\"USER CONFIG SAVED. BYE\")\n    saveDB()\nend","filter":{"args":[],"signature":"onStop()","slotKey":"-4"},"key":"3"}],"methods":[],"events":[]}