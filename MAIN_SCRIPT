{"slots":{"0":{"name":"CORE","type":{"events":[],"methods":[]}},"1":{"name":"SCREEN_A","type":{"events":[],"methods":[]}},"2":{"name":"SCREEN_B","type":{"events":[],"methods":[]}},"3":{"name":"DB","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"system.print(\"KICKSTART\")\nrefresh_in_sec = 8 --export\nunit.setTimer(\"refresh\", refresh_in_sec)\nunit.stopTimer(\"kickstart\")\nreload()","filter":{"args":[{"value":"kickstart"}],"signature":"onTimer(timerId)","slotKey":"-1"},"key":"0"},{"code":"--system.print(\"RELOAD\")\nreload()","filter":{"args":[{"value":"refresh"}],"signature":"onTimer(timerId)","slotKey":"-1"},"key":"1"},{"code":"-- DU-CONTAINER_MONITOR v2.3 by Virtuaburn [ODY]/[M3NTiS]\n-- Original script by carnopereira v1.9 - last commit\n-- Any questions please contact Virtualburn on discord : https://discord.gg/d5M7GeMuSJ\n-----------------\n-- USE : Programming board with CORE > SCREEN_A (+ optional SCREEN_B) > DATABANK\n-----------------\n\n-----------------\n-- SYSTEM VARS --\n-----------------\nlocal version = 2.3\n\n---------------\n-- USER VARS --\n---------------\n-- 5% mass-reduction talents: 0..5  (5 => 25% less mass in-game)\nlocal ItemMassReductionTalents = 5 --export\nlocal function getItemMassReductionFactor()\n    local t = math.floor(tonumber(ItemMassReductionTalents) or 0)\n    if t < 0 then t = 0 elseif t > 5 then t = 5 end\n    return 1.0 - (0.05 * t)\nend\n\n-------------------------------\n--  CAPACITY TALENTS & TIERS --\n-------------------------------\n-- +10% capacity talents: 0..5  (5 => +50%)\nlocal ContainerCapacityTalents = 5 --export\n\n-- Tier step increase in percent (e.g. 30% per step). \n-- 'c' (basic)=0, 'u'=1, 'a'=2, 'r'=3, **'e'=4 (Exotic)**\nlocal TierStepPercent = 30 --export\n\n-- Base capacities in L (NO talents, BASIC tier).\nlocal BaseContainerCapacityL = {\n  XS  = 1000,\n  S   = 8000,\n  M   = 64000,\n  L   = 128000,\n  XL  = 256000,\n  XXL = 512000,\n}\n\n-- +10% per talent level (0..5) -> 1.00 .. 1.50\nlocal function getCapacityTalentMultiplier()\n  local t = math.floor(tonumber(ContainerCapacityTalents) or 0)\n  if t < 0 then t = 0 elseif t > 5 then t = 5 end\n  return 1.0 + (0.10 * t)\nend\n\n-- Tier step multiplier (e.g., 1.30 for +30% per step)\nlocal function getTierStepMultiplier()\n  local p = tonumber(TierStepPercent) or 0\n  return 1.0 + (p / 100.0)\nend\n\n-- Map tier char -> number of steps: c=0, u=1, a=2, r=3, **e=4**\nlocal function getTierSteps(tierChar)\n  local t = (tostring(tierChar or \"c\")):lower()\n  if t == \"u\" then return 1\n  elseif t == \"a\" then return 2\n  elseif t == \"r\" then return 3\n  elseif t == \"e\" then return 4\n  else return 0 end\nend\n\n-- Split \"XXLa\"/\"XLu\"/\"Le\"/\"L\" -> base=\"XXL\"/\"XL\"/\"L\", tier=\"a\"/\"u\"/\"e\"/\"c\"\nlocal function splitSizeTier(sizeKey)\n  local up = tostring(sizeKey or \"L\"):upper()\n  local base = up:match(\"XXL\") or up:match(\"XL\") or up:match(\"XS\")\n            or (up:match(\"^L$\") and \"L\")\n            or (up:match(\"^M$\") and \"M\")\n            or (up:match(\"^S$\") and \"S\")\n            or \"L\"\n  local tier = (up:match(\"[UARE]$\") or \"C\"):lower()  -- accept Exotic 'E'\n  return base, tier\nend\n\nlocal Percentage_RED = 5 --export\nlocal Percentage_GREEN = 50 --export\nlocal UseContainerHubs = true --export\nlocal UseDoors = false --export\nlocal DoorUsers = {'user1', 'user2', 'user3'}\nlocal showHudWidget = false --export\n\n-----------------\n-- USER CONFIG --\n-----------------\nlocal SCREENA = {\"HEMATITE\",\"IRON\",\"BAUXITE\",\"ALUMINIUM\",\"COAL\",\"CARBON\",\"QUARTZ\",\"SILICON\",\"LIMESTONE\",\"CALCIUM\",\n                 \"MALACHITE\",\"COPPER\",\"NATRON\",\"SODIUM\",\"CHROMITE\",\"CHROMIUM\",\"ACANTHITE\",\"SILVER\",\"PYRITE\",\"SULFUR\"}\n\nlocal SCREENB = {\"PETALITE\",\"LITHIUM\",\"GARNIERITE\",\"NICKEL\",\"GOLDNUGGETS\",\"GOLD\",\"CRYOLITE\",\"FLUORINE\",\n                 \"COBALTITE\",\"COBALT\",\"KOLBECKITE\",\"SCANDIUM\",\"RHODONITE\",\"MANGANESE\",\"COLUMBITE\",\"NIOBIUM\",\n                 \"VANADINITE\",\"VANADIUM\",\"ILMENITE\",\"TITANIUM\"}\n\n-------------------------\n-- AUXILIARY FUNCTIONS --\n-------------------------\nfunction roundint(x) return x >= 0 and math.floor(x + 0.5) or math.ceil(x - 0.5) end\n\nfunction round(value)\n  local v = tonumber(value) or 0\n  return math.floor(v + 0.5)\nend\n\nfunction split(s, sep)\n  local fields = {}\n  sep = sep or \" \"\n  local pattern = string.format(\"([^%s]+)\", sep)\n  string.gsub(s, pattern, function(c) fields[#fields + 1] = c end)\n  return fields\nend\n\nlocal function hasValue(s) return (s == nil or s == \"\") and \"empty\" or s end\n\n----------------\n-- CORE STUFF --\n----------------\ncore = nil\ndbank = nil\nfor slot_name, slot in pairs(unit) do\n  if type(slot) == \"table\" and type(slot.export) == \"table\" and slot.getElementClass then\n    if slot.getClass():lower():find(\"coreunit\") then\n      core = slot\n    elseif slot.getClass():lower():find(\"databank\") then\n      dbank = slot\n    end\n  end\nend\n\n-- Parse tokens like \"10XLu\", \"2XXLa\", \"5Le\", \"xxl\", etc.\n-- Returns: count (number), sizeKey (\"XS\",\"S\",\"M\",\"L\",\"XL\",\"XXL\" + optional \"u\"/\"a\"/\"r\"/\"e\")\nlocal function parseCountAndSize(token)\n  token = tostring(token or \"\"):gsub(\"%s+\", \"\")\n  local d = token:match(\"^(%d+)\")\n  local count = tonumber(d) or 1\n  local rest = d and token:sub(#d + 1) or token\n  if rest == \"\" then rest = \"L\" end\n  local up = rest:upper()\n\n  local base = up:match(\"XXL\") or up:match(\"XL\") or up:match(\"XS\")\n            or up:match(\"^L$\") or up:match(\"^M$\") or up:match(\"^S$\")\n  if not base then\n    base = (up:find(\"XXL\") and \"XXL\") or (up:find(\"XL\") and \"XL\") or (up:find(\"XS\") and \"XS\")\n         or (up:find(\"L\") and \"L\") or (up:find(\"M\") and \"M\") or (up:find(\"S\") and \"S\") or \"L\"\n  end\n\n  -- accept Exotic suffix\n  local tier = up:match(\"[UARE]$\") or \"\"\n  return count, (base .. tier:lower())\nend\n\ncontainersIdList = {}\nif core ~= nil then\n  local elementsIdList = core.getElementIdList()\n  for _, id in pairs(elementsIdList) do\n    local elementType = core.getElementDisplayNameById(id):lower()\n    if elementType:find(\"container\") then\n      local name = core.getElementNameById(id)\n      if name:match(\"^CH_\") or name:match(\"^C_\") then\n        local temp = split(name, \"_\")\n        local count, sizeKey = parseCountAndSize(temp[2])\n        table.insert(containersIdList, { id, temp[1], count, sizeKey, temp[3], hasValue(temp[4]) })\n        -- 1:id, 2:type, 3:containercount, 4:containersize, 5:material, 6:description\n      end\n    end\n  end\nend\n\nfunction checkDB()\n  dbVersion = dbank and dbank.getFloatValue(\"version\") or nil\n  if dbVersion == nil then return nil\n  elseif dbVersion < version then return \"upgrade\"\n  else return \"noupgrade\" end\nend\n\nfunction saveDB()\n  if not dbank then return end\n  dbank.setFloatValue(\"version\", version)\n  dbank.setIntValue(\"ItemMassReductionTalents\", ItemMassReductionTalents)\n  dbank.setIntValue(\"ContainerCapacityTalents\", ContainerCapacityTalents)\n  dbank.setIntValue(\"TierStepPercent\", TierStepPercent)\n  dbank.setIntValue(\"BaseCap_XS\",  BaseContainerCapacityL.XS  or 0)\n  dbank.setIntValue(\"BaseCap_S\",   BaseContainerCapacityL.S   or 0)\n  dbank.setIntValue(\"BaseCap_M\",   BaseContainerCapacityL.M   or 0)\n  dbank.setIntValue(\"BaseCap_L\",   BaseContainerCapacityL.L   or 0)\n  dbank.setIntValue(\"BaseCap_XL\",  BaseContainerCapacityL.XL  or 0)\n  dbank.setIntValue(\"BaseCap_XXL\", BaseContainerCapacityL.XXL or 0)\n  dbank.setIntValue(\"Percentage_RED\", Percentage_RED)\n  dbank.setIntValue(\"Percentage_GREEN\", Percentage_GREEN)\n  dbank.setIntValue(\"UseContainerHubs\", UseContainerHubs and 1 or 0)\n  dbank.setIntValue(\"UseDoors\", UseDoors and 1 or 0)\n  dbank.setIntValue(\"showHudWidget\", showHudWidget and 1 or 0)\nend\n\nfunction readDB()\n  if not dbank then return end\n  local hasVersion = dbank.getFloatValue(\"version\")\n\n  local function nz(key, default)\n    local v = dbank.getIntValue(key)\n    if v and v > 0 then return v else return default end\n  end\n\n  if hasVersion then\n    ItemMassReductionTalents  = dbank.getIntValue(\"ItemMassReductionTalents\") or ItemMassReductionTalents\n    ContainerCapacityTalents  = dbank.getIntValue(\"ContainerCapacityTalents\") or ContainerCapacityTalents\n    TierStepPercent           = dbank.getIntValue(\"TierStepPercent\")          or TierStepPercent\n    Percentage_RED            = dbank.getIntValue(\"Percentage_RED\")           or Percentage_RED\n    Percentage_GREEN          = dbank.getIntValue(\"Percentage_GREEN\")         or Percentage_GREEN\n    UseContainerHubs          = (dbank.getIntValue(\"UseContainerHubs\") == 1)\n    UseDoors                  = (dbank.getIntValue(\"UseDoors\") == 1)\n    showHudWidget             = (dbank.getIntValue(\"showHudWidget\") == 1)\n\n    -- base capacities: only accept non-zero, otherwise keep code defaults\n    BaseContainerCapacityL.XS  = nz(\"BaseCap_XS\",  BaseContainerCapacityL.XS)\n    BaseContainerCapacityL.S   = nz(\"BaseCap_S\",   BaseContainerCapacityL.S)\n    BaseContainerCapacityL.M   = nz(\"BaseCap_M\",   BaseContainerCapacityL.M)\n    BaseContainerCapacityL.L   = nz(\"BaseCap_L\",   BaseContainerCapacityL.L)\n    BaseContainerCapacityL.XL  = nz(\"BaseCap_XL\",  BaseContainerCapacityL.XL)\n    BaseContainerCapacityL.XXL = nz(\"BaseCap_XXL\", BaseContainerCapacityL.XXL)\n  end\nend\n\nfunction goDB()\n-- >>> TEMP: force talents to full (write to DB) <<<\n  -- ItemMassReductionTalents = 5\n  -- ContainerCapacityTalents = 5\n  -- saveDB()\n  -- reload()\n-- <<< comment these lines after it shows correct kL >>>\n  if dbank ~= nil then\n    system.print(\"DATABANK FOUND\")\n    system.print(\"SCRIPT LOAD OK. CHECKING DB VERSION\")\n\n    local st = checkDB()\n    if st == nil then\n      system.print(\"UPGRADE DETECTED. FIRST RUN? LOADING KICKSTART\")\n      saveDB()  -- seed defaults\n      unit.setTimer(\"kickstart\", 1)\n    elseif st == \"upgrade\" then\n      readDB()\n      saveDB()  -- persist new keys if old DB missed them\n      system.print(\"UPGRADE DETECTED. USER CONFIG LOADED. LOADING KICKSTART\")\n      unit.setTimer(\"kickstart\", 1)\n    else\n      readDB()\n      unit.setTimer(\"kickstart\", 1)\n    end\n  else\n    system.print(\"NO DATABANK FOUND. LOADING KICKSTART\")\n    unit.setTimer(\"kickstart\", 1)\n  end\nend\n\n----------\n-- HTML --\n----------\nlocal html_css\nif UseContainerHubs then\n  html_css = [[\n  <style> \n  .table{height:99vh;margin:auto;padding:0;position:relative;width:98vw}\n  .column_1_2{position:absolute;left:20px;height:100%;width:45vw}\n  .column_2_2{position:absolute;right:0;height:100%;width:45vw}\n  .row{height:9.8vh;border:0px grey solid;padding-left:35%;width:99%}\n  .rowinfo{height:9.8vh;width:99%;text-align:center;font-size:1.4vw;font-weight:300;padding-top:6px}\n  .name{padding-left:0;line-height:5vh;font-size:4vh;display:inline-block;width:70%}\n  .progressbar{position:relative;float:right;bottom:2px;min-height:1vh;height:1vh;right:0;min-width:1vw}\n  .daysavailable{width:100%;position:relative;float:left;text-align:right;bottom:2px;height:2vh;font-size:12px}\n  .percentage{font-size:5vh;line-height:5vh;width:8.5vw;top:0;right:0;text-align:right;display:inline-block} \n  .desc{font-size:1.5vw;width:98%;display:inline-block}\n  .info{font-size:1.5vw;width:30%;display:inline-block;right:5px;position:absolute;text-align:right}\n  </style>]]\nelse\n  html_css = [[\n  <style> \n  .table{height:99vh;margin:auto;padding:0;position:relative;width:50vw;display:inline-block}\n  .column_1_2{position:absolute;height:100%;width:25vw}\n  .column_2_2{position:absolute;right:0;height:100%;width:25vw}\n  .row{height:9.8vh;width:99%;padding:0 8px} \n  .rowinfo{height:9.8vh;width:99%;text-align:center;font-size:1.4vw;font-weight:300;padding-top:6px}\n  .name{padding-left:0;line-height:5vh;font-size:3vh;display:inline-block;width:64%}\n  .progressbar{position:relative;float:right;bottom:2px;min-height:1vh;height:1vh;right:0;min-width:1vw}\n  .daysavailable{width:100%;position:relative;float:left;text-align:right;bottom:2px;height:2vh;font-size:12px}\n  .percentage{font-size:4vh;line-height:5vh;width:36%;top:0;right:0;text-align:right;display:inline-block;padding:0}\n  .desc{font-size:1.2vw;width:98%;display:inline-block}\n  .info{font-size:1.2vw;width:50%;display:inline-block;right:10px;position:absolute;text-align:right}\n  </style>]]\nend\n\ncss_loading = [[\n  <style> \n  .wrapper{color:white;font-size:2vw;}\n  .valign>div{border:dotted 1px white;padding:20px 20px;}\n  .wrapper{position:absolute;width:100%;height:100%;}\n  .valign{width:100%;height:100%;display:flex;justify-content:center;align-items:center;}\n  </style>\n]]\n\nlocal material_readout_top = [[<div class=\"table\"><div class=\"column_1_2\">]]\n\nfunction material_readout_cell(name)\n  x = {}\n  if name == nil then\n    html = [[<div class=\"row\"><div class=\"name\"></div><div class=\"percentage\"></div><div class=\"progressbar\" style=\"width:0%\">&nbsp;</div></div>]]\n  else\n    x = getMaterial(name)\n    if next(x) == nil then\n      html = [[<div class=\"rowinfo\">PLEASE CONNECT<br>]] .. name .. [[</div>]]\n    else\n      local row = x[1]\n\t\tpercentage = row and row[9] or 0\n\t\tdescription = row and row[6] or \"\"\n\t\tquantity = row and row[8] or 0\n\t\ttotalcontainerqtdinlitre = row and row[10] or 0\n      if description == \"empty\" then description = \"\" end\n       html = [[<div class=\"row\"><div class=\"name\">]] .. _G[name][1] .. [[</div><div class=\"percentage\">]] .. percentage .. [[%</div><div class=\"progressbar\" style=\"width:]] .. percentage .. [[%; background-color:]] .. progresscolor(percentage) .. [[\">&nbsp;</div>\n      <div class=\"desc\">]] .. description .. [[</div><div class=\"info\">]] .. litreParse(quantity, totalcontainerqtdinlitre) .. [[</div></div>]]\n    end\n  end\n  return html\nend\n\nlocal material_readout_middle = [[</div><div class=\"column_2_2\">]]\nlocal material_readout_bottom = [[</div></div>]]\n\nfunction progresscolor(percentage)\n  if tonumber(percentage) then\n    if percentage <= Percentage_RED then return \"red\"\n    elseif percentage < Percentage_GREEN then return \"yellow\"\n    else return \"green\" end\n  else\n    return \"pink\"\n  end\nend\n\nfunction litreParse(litre, total)\n  local size = \"\"\n  if total < 1000 then size = \"L\"\n  elseif total < 1000000 then total = total / 1000; size = \"kL\"\n  else total = total / 1000000; size = \"kt\" end\n\n  if litre < 1000 then\n    return string.format(\"%.1f\", litre) .. \"/\" .. string.format(\"%.1f\", total) .. size\n  elseif litre < 1000000 then\n    litre = litre / 1000\n    return string.format(\"%.1f\", litre) .. \"/\" .. string.format(\"%.1f\", total) .. size\n  else\n    litre = litre / 10000\n    total = total / 1000\n    return string.format(\"%.1f\", litre) .. \"/\" .. string.format(\"%.1f\", total) .. size\n  end\nend\n\n--------------------\n-- MATERIAL STUFF --\n--------------------\nfunction createMaterials()\n  -- T1\n  HEMATITE={\"Hematite\",5.04}; IRON={\"Iron\",7.85}; BAUXITE={\"Bauxite\",1.28}; ALUMINIUM={\"Aluminium\",2.7}\n  QUARTZ={\"Quartz\",2.65}; SILICON={\"Silicon\",2.33}; COAL={\"Coal\",1.35}; CARBON={\"Carbon\",2.27}\n  -- T2\n  LIMESTONE={\"Limestone\",2.7}; CALCIUM={\"Calcium\",1.55}; MALACHITE={\"Malachite\",4}; COPPER={\"Copper\",8.96}\n  NATRON={\"Natron\",1.55}; SODIUM={\"Sodium\",0.97}; CHROMITE={\"Chromite\",4.54}; CHROMIUM={\"Chromium\",7.19}\n  -- T3\n  PYRITE={\"Pyrite\",5.01}; SULFUR={\"Sulfur\",1.82}; PETALITE={\"Petalite\",2.41}; LITHIUM={\"Lithium\",0.53}\n  ACANTHITE={\"Acanthite\",7.2}; SILVER={\"Silver\",10.49}; GARNIERITE={\"Garnierite\",2.6}; NICKEL={\"Nickel\",8.91}\n  -- T4\n  GOLDNUGGETS={\"Gold Nuggets\",19.3}; GOLD={\"Gold\",19.3}; CRYOLITE={\"Cryolite\",2.95}; FLUORINE={\"Fluorine\",1.7}\n  COBALTITE={\"Cobaltite\",6.33}; COBALT={\"Cobalt\",8.9}; KOLBECKITE={\"Kolbeckite\",2.37}; SCANDIUM={\"Scandium\",2.98}\n  -- T5\n  RHODONITE={\"Rhodonite\",3.76}; MANGANESE={\"Manganese\",7.21}; COLUMBITE={\"Columbite\",5.38}; NIOBIUM={\"Niobium\",8.57}\n  VANADINITE={\"Vanadinite\",6.95}; VANADIUM={\"Vanadium\",6}; ILMENITE={\"Ilmenite\",4.55}; TITANIUM={\"Titanium\",4.51}\n  -- OTHER\n  OXYGEN={\"Oxygen\",1}; HYDROGEN={\"Hydrogen\",0.07}; WARPCELL={\"Warpcell\",100}\nend\n\nfunction getQuantity(material, materialmass)\n  return roundint(materialmass / (_G[material][2]))\nend\n\nfunction createMaterialArray(material)\n  local arrayX = {}\n  for _, j in pairs(containersIdList) do\n    if j[5] == material then\n      if (j[2] == \"CH\") or (j[2] == \"C\" and j[6] == \"empty\") then\n        table.insert(arrayX, {j[1], j[2], j[3], j[4], j[5], j[6]})\n      end\n    end\n  end\n  return arrayX\nend\n\n-- Capacity (in L) for ONE container with sizeKey like \"XXL\", \"XLu\", \"XXLe\", etc.\nfunction getContainerCapacity(sizeKey)\n  local base, tier  = splitSizeTier(sizeKey)\n  local baseL       = BaseContainerCapacityL[base] or 0\n  if baseL == 0 then system.print(\"WARN: unknown base capacity for size '\"..tostring(base)..\"'\") end\n  local tierSteps   = getTierSteps(tier)\n  local tierMult    = getTierStepMultiplier() ^ tierSteps\n  local talentMult  = getCapacityTalentMultiplier()\n  return baseL * tierMult * talentMult\nend\n\n-- Empty mass for ONE container by base size only (works for all tiers, incl. Exotic)\nlocal function getContainerMass(sizeKey)\n  local base = (function()\n    local up = tostring(sizeKey or 'L'):upper()\n    return up:match('XXL') or up:match('XL') or up:match('XS')\n        or (up == 'L' and 'L') or (up == 'M' and 'M') or (up == 'S' and 'S') or 'L'\n  end)()\n  local m = { XS=229.09, S=1281.31, M=7421.35, L=14842.7, XL=44210, XXL=88410 }\n  return m[base] or 0\nend\n\nlocal function arraylength(t)\n  if type(t) ~= \"table\" then return 0 end\n  local n = 0; for _ in pairs(t) do n = n + 1 end\n  return n\nend\n\n\nfunction calculateMaterial(arrayx)\n  local containermass, percentage = 0, 0\n  local arrayY = {}\n\n  for _, j in pairs(arrayx) do\n    local capacity = getContainerCapacity(j[4]) * tonumber(j[3])\n    if j[2] == \"CH\" then\n      containermass = core.getElementMassById(j[1]) - 55.8 -- CH base mass\n      if containermass > 0 then\n        local factor = getItemMassReductionFactor(); if factor <= 0 then factor = 1.0 end\n        local adjustedMass = containermass / factor\n        quantity = getQuantity(j[5], adjustedMass)\n\n        if _G[j[5]][3] ~= nil then\n          percentage = containerPercentage(quantity * _G[j[5]][3], capacity)\n          quantity   = quantity * _G[j[5]][3]\n        else\n          percentage = containerPercentage(quantity, capacity)\n        end\n\n        local totalL = capacity\n        table.insert(arrayY, {j[1], j[2], j[3], j[4], j[5], j[6], containermass, quantity, percentage, totalL})\n      end\n\n    elseif j[2] == \"C\" then\n      containermass = core.getElementMassById(j[1]) - getContainerMass(j[4])\n      if containermass > 0 then\n        local factor = getItemMassReductionFactor(); if factor <= 0 then factor = 1.0 end\n        local adjustedMass = containermass / factor\n        quantity = getQuantity(j[5], adjustedMass)\n\n        if _G[j[5]][3] ~= nil then\n          percentage = containerPercentage(quantity * _G[j[5]][3], capacity)\n          quantity   = quantity * _G[j[5]][3]\n        else\n          percentage = containerPercentage(quantity, capacity)\n        end\n\n        local totalL = capacity\n        table.insert(arrayY, {j[1], j[2], j[3], j[4], j[5], j[6], containermass, quantity, percentage, totalL})\n      end\n    end\n  end\n\n  -- Consolidate if more than 1 container present\n  if arraylength(arrayY) > 1 then\n    local capSum, qtySum, mat = 0, 0, \"\"\n    for _, r in pairs(arrayY) do\n      capSum = capSum + getContainerCapacity(r[4]) * tonumber(r[3])\n      qtySum = qtySum + r[8]\n      mat    = r[5]\n    end\n    return {{999999999, \"C\", 0, \"SUM\", mat, \"\", capSum, qtySum, containerPercentage(qtySum, capSum), capSum}}\n  end\n\n  return arrayY\nend\n\nfunction containerPercentage(materialqtd, containercapacity)\n  if materialqtd and containercapacity and containercapacity > 0 then\n    -- round to nearest integer percent\n    return math.floor((materialqtd * 100 / containercapacity) + 0.5)\n  else\n    return 0\n  end\nend\n\nfunction getMaterial(material)\n  local step1 = createMaterialArray(material)\n  local step2 = calculateMaterial(step1)\n  return step2\nend\n\n----------------\n-- HTML STUFF --\n----------------\nfunction create_material_readout_screen_A()\n  local html = html_css .. material_readout_top\n  for i = 1, 20 do if (i % 2 ~= 0) then html = html .. material_readout_cell(SCREENA[i]) end end\n  html = html .. material_readout_middle\n  for i = 1, 20 do if (i % 2 == 0) then html = html .. material_readout_cell(SCREENA[i]) end end\n  html = html .. material_readout_bottom\n  if not UseContainerHubs then\n    html = html .. material_readout_top\n    for i = 1, 20 do if (i % 2 ~= 0) then html = html .. material_readout_cell(SCREENB[i]) end end\n    html = html .. material_readout_middle\n    for i = 1, 20 do if (i % 2 == 0) then html = html .. material_readout_cell(SCREENB[i]) end end\n    html = html .. material_readout_bottom\n  end\n  return html\nend\n\nfunction create_material_readout_screen_B()\n  local html = html_css .. material_readout_top\n  for i = 1, 20 do if (i % 2 ~= 0) then html = html .. material_readout_cell(SCREENB[i]) end end\n  html = html .. material_readout_middle\n  for i = 1, 20 do if (i % 2 == 0) then html = html .. material_readout_cell(SCREENB[i]) end end\n  html = html .. material_readout_bottom\n  return html\nend\n\nfunction clearSCREEN()\n  if SCREEN_A and SCREEN_A.clear then SCREEN_A.clear() end\n  if SCREEN_B and SCREEN_B.clear then SCREEN_B.clear() end\nend\n\n\nfunction reload()\n  clearSCREEN()\n  local html = [[<div style=\"width:100vw\"><div style=\"margin-top:10px;padding:0;width:100vw;display:inline-block;\">]] .. create_material_readout_screen_A() .. [[</div></div>]]\n  SCREEN_A.setHTML(html)\n  if SCREEN_B ~= nil then\n    html = [[<div style=\"width:100vw\"><div style=\"margin-top:10px;padding:0;width:100vw;display:inline-block;\">]] .. create_material_readout_screen_B() .. [[</div></div>]]\n    SCREEN_B.setHTML(html)\n  end\nend\n\nfunction warmup()\n  system.print(\"WARMUP\")\n  local html = css_loading .. [[<div class=\"wrapper\"><div class=\"valign\"><div>LOADING</div></div></div>]]\n  SCREEN_A.setHTML(html)\n  if SCREEN_B ~= nil then SCREEN_B.setHTML(html) end\nend\n\nfunction door()\n  local playerId = unit.getMasterPlayerId()\n  local playerName = system.getPlayerName(playerId)\n  local t = DoorUsers\n  local function has_value(tab, val)\n    for _, v in ipairs(tab) do if v == val then return true end end\n    return false\n  end\n  if has_value(t, playerName) then\n    if DOOR1 ~= nil then DOOR1.activate() end\n    if DOOR2 ~= nil then DOOR2.activate() end\n  else\n    system.print('PERMISSION DENIED')\n  end\nend\n\n-- STARTUP FACTORY\nwarmup()\ncreateMaterials()\ngoDB()\n\nif not showHudWidget then unit.hideWidget() end\nif UseDoors then door() end\n\n\n\n","filter":{"args":[],"signature":"onStart()","slotKey":"-4"},"key":"2"},{"code":"SCREEN_A.clear()\nif SCREEN_B ~= nil then SCREEN_B.clear() end\n\nif DOOR1 ~= nil then\nif DOOR1.getState() == 1 then  \n    if DOOR1 ~= nil then DOOR1.deactivate() end\n    if DOOR2 ~= nil then DOOR2.deactivate() end\n    SCREEN_A.clear() \n    if SCREEN_B ~= nil then SCREEN_B.clear() end\nend\nend\n\nif dbank ~= nil then \n    system.print(\"USER CONFIG SAVED. BYE\")\n    saveDB()\nend","filter":{"args":[],"signature":"onStop()","slotKey":"-4"},"key":"3"}],"methods":[],"events":[]}
