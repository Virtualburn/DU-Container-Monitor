-- DU-CONTAINER_MONITOR v2.3 by Virtuaburn [ODY]/[M3NTiS]
-- Original script by carnopereira v1.9 - last commit
-- Any questions please contact Virtualburn on discord : https://discord.gg/d5M7GeMuSJ
-----------------
-- USE : Programming board with CORE > SCREEN_A (+ optional SCREEN_B) > DATABANK
-----------------

-----------------
-- SYSTEM VARS --
-----------------
local version = 2.3

---------------
-- USER VARS --
---------------
-- 5% mass-reduction talents: 0..5  (5 => 25% less mass in-game)
local ItemMassReductionTalents = 5 --export
local function getItemMassReductionFactor()
    local t = math.floor(tonumber(ItemMassReductionTalents) or 0)
    if t < 0 then t = 0 elseif t > 5 then t = 5 end
    return 1.0 - (0.05 * t)
end

-------------------------------
--  CAPACITY TALENTS & TIERS --
-------------------------------
-- +10% capacity talents: 0..5  (5 => +50%)
local ContainerCapacityTalents = 5 --export

-- Tier step increase in percent (e.g. 30% per step). 
-- 'c' (basic)=0, 'u'=1, 'a'=2, 'r'=3, **'e'=4 (Exotic)**
local TierStepPercent = 30 --export

-- Base capacities in L (NO talents, BASIC tier).
local BaseContainerCapacityL = {
  XS  = 1000,
  S   = 8000,
  M   = 64000,
  L   = 128000,
  XL  = 256000,
  XXL = 512000,
}

-- +10% per talent level (0..5) -> 1.00 .. 1.50
local function getCapacityTalentMultiplier()
  local t = math.floor(tonumber(ContainerCapacityTalents) or 0)
  if t < 0 then t = 0 elseif t > 5 then t = 5 end
  return 1.0 + (0.10 * t)
end

-- Tier step multiplier (e.g., 1.30 for +30% per step)
local function getTierStepMultiplier()
  local p = tonumber(TierStepPercent) or 0
  return 1.0 + (p / 100.0)
end

-- Map tier char -> number of steps: c=0, u=1, a=2, r=3, **e=4**
local function getTierSteps(tierChar)
  local t = (tostring(tierChar or "c")):lower()
  if t == "u" then return 1
  elseif t == "a" then return 2
  elseif t == "r" then return 3
  elseif t == "e" then return 4
  else return 0 end
end

-- Split "XXLa"/"XLu"/"Le"/"L" -> base="XXL"/"XL"/"L", tier="a"/"u"/"e"/"c"
local function splitSizeTier(sizeKey)
  local up = tostring(sizeKey or "L"):upper()
  local base = up:match("XXL") or up:match("XL") or up:match("XS")
            or (up:match("^L$") and "L")
            or (up:match("^M$") and "M")
            or (up:match("^S$") and "S")
            or "L"
  local tier = (up:match("[UARE]$") or "C"):lower()  -- accept Exotic 'E'
  return base, tier
end

local Percentage_RED = 5 --export
local Percentage_GREEN = 50 --export
local UseContainerHubs = true --export
local UseDoors = false --export
local DoorUsers = {'user1', 'user2', 'user3'}
local showHudWidget = false --export

-----------------
-- USER CONFIG --
-----------------
local SCREENA = {"HEMATITE","IRON","BAUXITE","ALUMINIUM","COAL","CARBON","QUARTZ","SILICON","LIMESTONE","CALCIUM",
                 "MALACHITE","COPPER","NATRON","SODIUM","CHROMITE","CHROMIUM","ACANTHITE","SILVER","PYRITE","SULFUR"}

local SCREENB = {"PETALITE","LITHIUM","GARNIERITE","NICKEL","GOLDNUGGETS","GOLD","CRYOLITE","FLUORINE",
                 "COBALTITE","COBALT","KOLBECKITE","SCANDIUM","RHODONITE","MANGANESE","COLUMBITE","NIOBIUM",
                 "VANADINITE","VANADIUM","ILMENITE","TITANIUM"}

-------------------------
-- AUXILIARY FUNCTIONS --
-------------------------
function roundint(x) return x >= 0 and math.floor(x + 0.5) or math.ceil(x - 0.5) end

function round(value)
  local v = tonumber(value) or 0
  return math.floor(v + 0.5)
end

function split(s, sep)
  local fields = {}
  sep = sep or " "
  local pattern = string.format("([^%s]+)", sep)
  string.gsub(s, pattern, function(c) fields[#fields + 1] = c end)
  return fields
end

local function hasValue(s) return (s == nil or s == "") and "empty" or s end

----------------
-- CORE STUFF --
----------------
core = nil
dbank = nil
for slot_name, slot in pairs(unit) do
  if type(slot) == "table" and type(slot.export) == "table" and slot.getElementClass then
    if slot.getClass():lower():find("coreunit") then
      core = slot
    elseif slot.getClass():lower():find("databank") then
      dbank = slot
    end
  end
end

-- Parse tokens like "10XLu", "2XXLa", "5Le", "xxl", etc.
-- Returns: count (number), sizeKey ("XS","S","M","L","XL","XXL" + optional "u"/"a"/"r"/"e")
local function parseCountAndSize(token)
  token = tostring(token or ""):gsub("%s+", "")
  local d = token:match("^(%d+)")
  local count = tonumber(d) or 1
  local rest = d and token:sub(#d + 1) or token
  if rest == "" then rest = "L" end
  local up = rest:upper()

  local base = up:match("XXL") or up:match("XL") or up:match("XS")
            or up:match("^L$") or up:match("^M$") or up:match("^S$")
  if not base then
    base = (up:find("XXL") and "XXL") or (up:find("XL") and "XL") or (up:find("XS") and "XS")
         or (up:find("L") and "L") or (up:find("M") and "M") or (up:find("S") and "S") or "L"
  end

  -- accept Exotic suffix
  local tier = up:match("[UARE]$") or ""
  return count, (base .. tier:lower())
end

containersIdList = {}
if core ~= nil then
  local elementsIdList = core.getElementIdList()
  for _, id in pairs(elementsIdList) do
    local elementType = core.getElementDisplayNameById(id):lower()
    if elementType:find("container") then
      local name = core.getElementNameById(id)
      if name:match("^CH_") or name:match("^C_") then
        local temp = split(name, "_")
        local count, sizeKey = parseCountAndSize(temp[2])
        table.insert(containersIdList, { id, temp[1], count, sizeKey, temp[3], hasValue(temp[4]) })
        -- 1:id, 2:type, 3:containercount, 4:containersize, 5:material, 6:description
      end
    end
  end
end

function checkDB()
  dbVersion = dbank and dbank.getFloatValue("version") or nil
  if dbVersion == nil then return nil
  elseif dbVersion < version then return "upgrade"
  else return "noupgrade" end
end

function saveDB()
  if not dbank then return end
  dbank.setFloatValue("version", version)
  dbank.setIntValue("ItemMassReductionTalents", ItemMassReductionTalents)
  dbank.setIntValue("ContainerCapacityTalents", ContainerCapacityTalents)
  dbank.setIntValue("TierStepPercent", TierStepPercent)
  dbank.setIntValue("BaseCap_XS",  BaseContainerCapacityL.XS  or 0)
  dbank.setIntValue("BaseCap_S",   BaseContainerCapacityL.S   or 0)
  dbank.setIntValue("BaseCap_M",   BaseContainerCapacityL.M   or 0)
  dbank.setIntValue("BaseCap_L",   BaseContainerCapacityL.L   or 0)
  dbank.setIntValue("BaseCap_XL",  BaseContainerCapacityL.XL  or 0)
  dbank.setIntValue("BaseCap_XXL", BaseContainerCapacityL.XXL or 0)
  dbank.setIntValue("Percentage_RED", Percentage_RED)
  dbank.setIntValue("Percentage_GREEN", Percentage_GREEN)
  dbank.setIntValue("UseContainerHubs", UseContainerHubs and 1 or 0)
  dbank.setIntValue("UseDoors", UseDoors and 1 or 0)
  dbank.setIntValue("showHudWidget", showHudWidget and 1 or 0)
end

function readDB()
  if not dbank then return end
  local hasVersion = dbank.getFloatValue("version")

  local function nz(key, default)
    local v = dbank.getIntValue(key)
    if v and v > 0 then return v else return default end
  end

  if hasVersion then
    ItemMassReductionTalents  = dbank.getIntValue("ItemMassReductionTalents") or ItemMassReductionTalents
    ContainerCapacityTalents  = dbank.getIntValue("ContainerCapacityTalents") or ContainerCapacityTalents
    TierStepPercent           = dbank.getIntValue("TierStepPercent")          or TierStepPercent
    Percentage_RED            = dbank.getIntValue("Percentage_RED")           or Percentage_RED
    Percentage_GREEN          = dbank.getIntValue("Percentage_GREEN")         or Percentage_GREEN
    UseContainerHubs          = (dbank.getIntValue("UseContainerHubs") == 1)
    UseDoors                  = (dbank.getIntValue("UseDoors") == 1)
    showHudWidget             = (dbank.getIntValue("showHudWidget") == 1)

    -- base capacities: only accept non-zero, otherwise keep code defaults
    BaseContainerCapacityL.XS  = nz("BaseCap_XS",  BaseContainerCapacityL.XS)
    BaseContainerCapacityL.S   = nz("BaseCap_S",   BaseContainerCapacityL.S)
    BaseContainerCapacityL.M   = nz("BaseCap_M",   BaseContainerCapacityL.M)
    BaseContainerCapacityL.L   = nz("BaseCap_L",   BaseContainerCapacityL.L)
    BaseContainerCapacityL.XL  = nz("BaseCap_XL",  BaseContainerCapacityL.XL)
    BaseContainerCapacityL.XXL = nz("BaseCap_XXL", BaseContainerCapacityL.XXL)
  end
end

function goDB()
-- >>> TEMP: force talents to full (write to DB) <<<
  -- ItemMassReductionTalents = 5
  -- ContainerCapacityTalents = 5
  -- saveDB()
  -- reload()
-- <<< comment these lines after it shows correct kL >>>
  if dbank ~= nil then
    system.print("DATABANK FOUND")
    system.print("SCRIPT LOAD OK. CHECKING DB VERSION")

    local st = checkDB()
    if st == nil then
      system.print("UPGRADE DETECTED. FIRST RUN? LOADING KICKSTART")
      saveDB()  -- seed defaults
      unit.setTimer("kickstart", 1)
    elseif st == "upgrade" then
      readDB()
      saveDB()  -- persist new keys if old DB missed them
      system.print("UPGRADE DETECTED. USER CONFIG LOADED. LOADING KICKSTART")
      unit.setTimer("kickstart", 1)
    else
      readDB()
      unit.setTimer("kickstart", 1)
    end
  else
    system.print("NO DATABANK FOUND. LOADING KICKSTART")
    unit.setTimer("kickstart", 1)
  end
end

----------
-- HTML --
----------
local html_css
if UseContainerHubs then
  html_css = [[
  <style> 
  .table{height:99vh;margin:auto;padding:0;position:relative;width:98vw}
  .column_1_2{position:absolute;left:20px;height:100%;width:45vw}
  .column_2_2{position:absolute;right:0;height:100%;width:45vw}
  .row{height:9.8vh;border:0px grey solid;padding-left:35%;width:99%}
  .rowinfo{height:9.8vh;width:99%;text-align:center;font-size:1.4vw;font-weight:300;padding-top:6px}
  .name{padding-left:0;line-height:5vh;font-size:4vh;display:inline-block;width:70%}
  .progressbar{position:relative;float:right;bottom:2px;min-height:1vh;height:1vh;right:0;min-width:1vw}
  .daysavailable{width:100%;position:relative;float:left;text-align:right;bottom:2px;height:2vh;font-size:12px}
  .percentage{font-size:5vh;line-height:5vh;width:8.5vw;top:0;right:0;text-align:right;display:inline-block} 
  .desc{font-size:1.5vw;width:98%;display:inline-block}
  .info{font-size:1.5vw;width:30%;display:inline-block;right:5px;position:absolute;text-align:right}
  </style>]]
else
  html_css = [[
  <style> 
  .table{height:99vh;margin:auto;padding:0;position:relative;width:50vw;display:inline-block}
  .column_1_2{position:absolute;height:100%;width:25vw}
  .column_2_2{position:absolute;right:0;height:100%;width:25vw}
  .row{height:9.8vh;width:99%;padding:0 8px} 
  .rowinfo{height:9.8vh;width:99%;text-align:center;font-size:1.4vw;font-weight:300;padding-top:6px}
  .name{padding-left:0;line-height:5vh;font-size:3vh;display:inline-block;width:64%}
  .progressbar{position:relative;float:right;bottom:2px;min-height:1vh;height:1vh;right:0;min-width:1vw}
  .daysavailable{width:100%;position:relative;float:left;text-align:right;bottom:2px;height:2vh;font-size:12px}
  .percentage{font-size:4vh;line-height:5vh;width:36%;top:0;right:0;text-align:right;display:inline-block;padding:0}
  .desc{font-size:1.2vw;width:98%;display:inline-block}
  .info{font-size:1.2vw;width:50%;display:inline-block;right:10px;position:absolute;text-align:right}
  </style>]]
end

css_loading = [[
  <style> 
  .wrapper{color:white;font-size:2vw;}
  .valign>div{border:dotted 1px white;padding:20px 20px;}
  .wrapper{position:absolute;width:100%;height:100%;}
  .valign{width:100%;height:100%;display:flex;justify-content:center;align-items:center;}
  </style>
]]

local material_readout_top = [[<div class="table"><div class="column_1_2">]]

function material_readout_cell(name)
  x = {}
  if name == nil then
    html = [[<div class="row"><div class="name"></div><div class="percentage"></div><div class="progressbar" style="width:0%">&nbsp;</div></div>]]
  else
    x = getMaterial(name)
    if next(x) == nil then
      html = [[<div class="rowinfo">PLEASE CONNECT<br>]] .. name .. [[</div>]]
    else
      local row = x[1]
		percentage = row and row[9] or 0
		description = row and row[6] or ""
		quantity = row and row[8] or 0
		totalcontainerqtdinlitre = row and row[10] or 0
      if description == "empty" then description = "" end
       html = [[<div class="row"><div class="name">]] .. _G[name][1] .. [[</div><div class="percentage">]] .. percentage .. [[%</div><div class="progressbar" style="width:]] .. percentage .. [[%; background-color:]] .. progresscolor(percentage) .. [[">&nbsp;</div>
      <div class="desc">]] .. description .. [[</div><div class="info">]] .. litreParse(quantity, totalcontainerqtdinlitre) .. [[</div></div>]]
    end
  end
  return html
end

local material_readout_middle = [[</div><div class="column_2_2">]]
local material_readout_bottom = [[</div></div>]]

function progresscolor(percentage)
  if tonumber(percentage) then
    if percentage <= Percentage_RED then return "red"
    elseif percentage < Percentage_GREEN then return "yellow"
    else return "green" end
  else
    return "pink"
  end
end

function litreParse(litre, total)
  local size = ""
  if total < 1000 then size = "L"
  elseif total < 1000000 then total = total / 1000; size = "kL"
  else total = total / 1000000; size = "kt" end

  if litre < 1000 then
    return string.format("%.1f", litre) .. "/" .. string.format("%.1f", total) .. size
  elseif litre < 1000000 then
    litre = litre / 1000
    return string.format("%.1f", litre) .. "/" .. string.format("%.1f", total) .. size
  else
    litre = litre / 10000
    total = total / 1000
    return string.format("%.1f", litre) .. "/" .. string.format("%.1f", total) .. size
  end
end

--------------------
-- MATERIAL STUFF --
--------------------
function createMaterials()
  -- T1
  HEMATITE={"Hematite",5.04}; IRON={"Iron",7.85}; BAUXITE={"Bauxite",1.28}; ALUMINIUM={"Aluminium",2.7}
  QUARTZ={"Quartz",2.65}; SILICON={"Silicon",2.33}; COAL={"Coal",1.35}; CARBON={"Carbon",2.27}
  -- T2
  LIMESTONE={"Limestone",2.7}; CALCIUM={"Calcium",1.55}; MALACHITE={"Malachite",4}; COPPER={"Copper",8.96}
  NATRON={"Natron",1.55}; SODIUM={"Sodium",0.97}; CHROMITE={"Chromite",4.54}; CHROMIUM={"Chromium",7.19}
  -- T3
  PYRITE={"Pyrite",5.01}; SULFUR={"Sulfur",1.82}; PETALITE={"Petalite",2.41}; LITHIUM={"Lithium",0.53}
  ACANTHITE={"Acanthite",7.2}; SILVER={"Silver",10.49}; GARNIERITE={"Garnierite",2.6}; NICKEL={"Nickel",8.91}
  -- T4
  GOLDNUGGETS={"Gold Nuggets",19.3}; GOLD={"Gold",19.3}; CRYOLITE={"Cryolite",2.95}; FLUORINE={"Fluorine",1.7}
  COBALTITE={"Cobaltite",6.33}; COBALT={"Cobalt",8.9}; KOLBECKITE={"Kolbeckite",2.37}; SCANDIUM={"Scandium",2.98}
  -- T5
  RHODONITE={"Rhodonite",3.76}; MANGANESE={"Manganese",7.21}; COLUMBITE={"Columbite",5.38}; NIOBIUM={"Niobium",8.57}
  VANADINITE={"Vanadinite",6.95}; VANADIUM={"Vanadium",6}; ILMENITE={"Ilmenite",4.55}; TITANIUM={"Titanium",4.51}
  -- OTHER
  OXYGEN={"Oxygen",1}; HYDROGEN={"Hydrogen",0.07}; WARPCELL={"Warpcell",100}
end

function getQuantity(material, materialmass)
  return roundint(materialmass / (_G[material][2]))
end

function createMaterialArray(material)
  local arrayX = {}
  for _, j in pairs(containersIdList) do
    if j[5] == material then
      if (j[2] == "CH") or (j[2] == "C" and j[6] == "empty") then
        table.insert(arrayX, {j[1], j[2], j[3], j[4], j[5], j[6]})
      end
    end
  end
  return arrayX
end

-- Capacity (in L) for ONE container with sizeKey like "XXL", "XLu", "XXLe", etc.
function getContainerCapacity(sizeKey)
  local base, tier  = splitSizeTier(sizeKey)
  local baseL       = BaseContainerCapacityL[base] or 0
  if baseL == 0 then system.print("WARN: unknown base capacity for size '"..tostring(base).."'") end
  local tierSteps   = getTierSteps(tier)
  local tierMult    = getTierStepMultiplier() ^ tierSteps
  local talentMult  = getCapacityTalentMultiplier()
  return baseL * tierMult * talentMult
end

-- Empty mass for ONE container by base size only (works for all tiers, incl. Exotic)
local function getContainerMass(sizeKey)
  local base = (function()
    local up = tostring(sizeKey or 'L'):upper()
    return up:match('XXL') or up:match('XL') or up:match('XS')
        or (up == 'L' and 'L') or (up == 'M' and 'M') or (up == 'S' and 'S') or 'L'
  end)()
  local m = { XS=229.09, S=1281.31, M=7421.35, L=14842.7, XL=44210, XXL=88410 }
  return m[base] or 0
end

local function arraylength(t)
  if type(t) ~= "table" then return 0 end
  local n = 0; for _ in pairs(t) do n = n + 1 end
  return n
end


function calculateMaterial(arrayx)
  local containermass, percentage = 0, 0
  local arrayY = {}

  for _, j in pairs(arrayx) do
    local capacity = getContainerCapacity(j[4]) * tonumber(j[3])
    if j[2] == "CH" then
      containermass = core.getElementMassById(j[1]) - 55.8 -- CH base mass
      if containermass > 0 then
        local factor = getItemMassReductionFactor(); if factor <= 0 then factor = 1.0 end
        local adjustedMass = containermass / factor
        quantity = getQuantity(j[5], adjustedMass)

        if _G[j[5]][3] ~= nil then
          percentage = containerPercentage(quantity * _G[j[5]][3], capacity)
          quantity   = quantity * _G[j[5]][3]
        else
          percentage = containerPercentage(quantity, capacity)
        end

        local totalL = capacity
        table.insert(arrayY, {j[1], j[2], j[3], j[4], j[5], j[6], containermass, quantity, percentage, totalL})
      end

    elseif j[2] == "C" then
      containermass = core.getElementMassById(j[1]) - getContainerMass(j[4])
      if containermass > 0 then
        local factor = getItemMassReductionFactor(); if factor <= 0 then factor = 1.0 end
        local adjustedMass = containermass / factor
        quantity = getQuantity(j[5], adjustedMass)

        if _G[j[5]][3] ~= nil then
          percentage = containerPercentage(quantity * _G[j[5]][3], capacity)
          quantity   = quantity * _G[j[5]][3]
        else
          percentage = containerPercentage(quantity, capacity)
        end

        local totalL = capacity
        table.insert(arrayY, {j[1], j[2], j[3], j[4], j[5], j[6], containermass, quantity, percentage, totalL})
      end
    end
  end

  -- Consolidate if more than 1 container present
  if arraylength(arrayY) > 1 then
    local capSum, qtySum, mat = 0, 0, ""
    for _, r in pairs(arrayY) do
      capSum = capSum + getContainerCapacity(r[4]) * tonumber(r[3])
      qtySum = qtySum + r[8]
      mat    = r[5]
    end
    return {{999999999, "C", 0, "SUM", mat, "", capSum, qtySum, containerPercentage(qtySum, capSum), capSum}}
  end

  return arrayY
end

function containerPercentage(materialqtd, containercapacity)
  if materialqtd and containercapacity and containercapacity > 0 then
    -- round to nearest integer percent
    return math.floor((materialqtd * 100 / containercapacity) + 0.5)
  else
    return 0
  end
end

function getMaterial(material)
  local step1 = createMaterialArray(material)
  local step2 = calculateMaterial(step1)
  return step2
end

----------------
-- HTML STUFF --
----------------
function create_material_readout_screen_A()
  local html = html_css .. material_readout_top
  for i = 1, 20 do if (i % 2 ~= 0) then html = html .. material_readout_cell(SCREENA[i]) end end
  html = html .. material_readout_middle
  for i = 1, 20 do if (i % 2 == 0) then html = html .. material_readout_cell(SCREENA[i]) end end
  html = html .. material_readout_bottom
  if not UseContainerHubs then
    html = html .. material_readout_top
    for i = 1, 20 do if (i % 2 ~= 0) then html = html .. material_readout_cell(SCREENB[i]) end end
    html = html .. material_readout_middle
    for i = 1, 20 do if (i % 2 == 0) then html = html .. material_readout_cell(SCREENB[i]) end end
    html = html .. material_readout_bottom
  end
  return html
end

function create_material_readout_screen_B()
  local html = html_css .. material_readout_top
  for i = 1, 20 do if (i % 2 ~= 0) then html = html .. material_readout_cell(SCREENB[i]) end end
  html = html .. material_readout_middle
  for i = 1, 20 do if (i % 2 == 0) then html = html .. material_readout_cell(SCREENB[i]) end end
  html = html .. material_readout_bottom
  return html
end

function clearSCREEN()
  if SCREEN_A and SCREEN_A.clear then SCREEN_A.clear() end
  if SCREEN_B and SCREEN_B.clear then SCREEN_B.clear() end
end


function reload()
  clearSCREEN()
  local html = [[<div style="width:100vw"><div style="margin-top:10px;padding:0;width:100vw;display:inline-block;">]] .. create_material_readout_screen_A() .. [[</div></div>]]
  SCREEN_A.setHTML(html)
  if SCREEN_B ~= nil then
    html = [[<div style="width:100vw"><div style="margin-top:10px;padding:0;width:100vw;display:inline-block;">]] .. create_material_readout_screen_B() .. [[</div></div>]]
    SCREEN_B.setHTML(html)
  end
end

function warmup()
  system.print("WARMUP")
  local html = css_loading .. [[<div class="wrapper"><div class="valign"><div>LOADING</div></div></div>]]
  SCREEN_A.setHTML(html)
  if SCREEN_B ~= nil then SCREEN_B.setHTML(html) end
end

function door()
  local playerId = unit.getMasterPlayerId()
  local playerName = system.getPlayerName(playerId)
  local t = DoorUsers
  local function has_value(tab, val)
    for _, v in ipairs(tab) do if v == val then return true end end
    return false
  end
  if has_value(t, playerName) then
    if DOOR1 ~= nil then DOOR1.activate() end
    if DOOR2 ~= nil then DOOR2.activate() end
  else
    system.print('PERMISSION DENIED')
  end
end

-- STARTUP FACTORY
warmup()
createMaterials()
goDB()

if not showHudWidget then unit.hideWidget() end
if UseDoors then door() end




